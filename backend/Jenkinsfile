pipeline {
    agent any
    
    environment {
        APP_JAVA = 'backend-0.0.1-SNAPSHOT.jar'
        APP_PATH = '/home/ubuntu/deploy/'
    }
    
    stages {
        stage('Build') {
            steps {
                dir('backend') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        
        stage('Start SQL') {
            steps {
                sh 'docker start nexum-db'
            }
        }
        
        stage('Create Persistent Volume') {
            steps {
                    script {
                        def volumeExists = sh(script: "docker volume inspect nexum-volume", returnStatus: true)
                        if (volumeExists == 0) {
                            echo "Volume 'nexum-volume' already exists"
                        } else {
                            sh 'docker volume create nexum-volume'
                            echo "Volume 'nexum-volume' created"
                        }
                    }
                }
          }

        stage('Transfer Jar to Deploy Folder') {
            steps {
                dir('backend') {
                    script {
                        if (fileExists("$APP_PATH$APP_JAVA")) {
                            sh "rm $APP_PATH$APP_JAVA"
                        }
                        sh "cp target/$APP_JAVA $APP_PATH"
                        sh "chmod +x $APP_PATH$APP_JAVA"
                    }
                }
            }
        }
        
        stage('Copy Jar to Volume Directory') {
            steps {
               sh 'docker run --rm -v nexum-volume:/app -v "${env.WORKSPACE}/backend/target:/source" alpine cp /source/backend-0.0.1-SNAPSHOT.jar /app'
            }
        }
        
        stage('Docker Deploy') {
            steps {
                script {
                    stopAndRemoveContainer()
                    removeImage()
                    def buildSuccess = buildDockerImage()
                    if (buildSuccess) {
                        createDockerContainer()
                    } else {
                        error "Error: Failed to build Docker image"
                    }
                }
            }
        }
    }
}



def stopAndRemoveContainer() {
    sh "docker stop nexum-back || true"
    sh "docker rm nexum-back || true"
}

def removeImage() {
    sh "docker rmi nexum-back-image || true"
}

def buildDockerImage() {
    def imageName = 'nexum-back-image'
    def dockerfilePath = "${env.WORKSPACE}/backend/Dockerfile"
    def dockerBuildContext = "${env.WORKSPACE}/backend"

    def dockerBuildCommand = "docker build -t ${imageName} -f ${dockerfilePath} ${dockerBuildContext}"

    def buildOutput = sh(returnStatus: true, script: dockerBuildCommand)

    if (buildOutput == 0) {
        return true
    } else {
        error "Error: Failed to build Docker image. Command output:\n${buildOutput}"
        return false
    }
}

def createDockerContainer() {
    def containerName = 'nexum-back'
    def imageName = 'nexum-back-image'
    def APP_JAVA = 'backend-0.0.1-SNAPSHOT.jar'
    def APP_PATH = '/home/ubuntu/deploy/'

    def createContainerCommand = "docker run -d -p 8000:8000 --network nexum-network --name ${containerName} -v nexum-volume:/app ${imageName}"

    sh createContainerCommand
}
